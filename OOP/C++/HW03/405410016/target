<作業內容>
以 C++ 或 Java 擇一撰寫即可。

實作出三個class，分別命名為 Account, User, Transaction，
，以及主程式和 makefile。

內容如下:

1. Account class (20%)
內含ID, amount, deductAmount, amountToTransfer，型態皆為int。 (Account 之間的 ID 不可重複)
AccountOfB：記錄交易對象

constructor:
Account(int amount, int ID) (amount 為帳戶初始金額)

其中包含的函數有:
(1)bool withdraw()：提取一定金額，成功回傳true，否則回傳false
(2)bool deposit()：存入一定金額，成功回傳true
(3)bool transferMoney(Account &AccountOfB, int amountToTransfer)：
把一定金額(amountToTransfer) 轉到另一個帳戶(AccountOfB)
(4)int getAmount()：查詢目前帳戶金額

2. User class (20%)
內含name, ID, account, trans[]。
其中name為一個字串
ID : 型態為int，User 之間的 ID 不可以重複。
account : 上述的 account class
trans[] : 紀錄交易資訊，陣列大小可以自訂。
(提示: 你可以用 array of Transaction pointers 儲存交易資訊，或是利用不同的 constructor 來讓 array 可以成功初始化，
或利用其他資料結構儲存(例如再開一個 class)也可以)

constructor:
User(const char &name[])
你可以視情況自行修正成 只用 const char &input_name，或是改用 pointer 也可以。
(包含 User, Account, Transaction 的 constuctor，都可以自行修改參數類型)

其中包含的函數為:
(1)char *getUsername()： 回傳username
(2)Account &getAccount()：回傳user Account
(3)int getID()：回傳 user ID

3. Transaction class (20%)
內含type, account, amount 三個變數。其中type為一個字串，紀錄交易的類型
amount 為 int，紀錄交易金額。
account 為一個 reference，指向執行交易的 account。

constructor:
Transaction(Account &account, char type[])

其中包含的函數為:
(1)void print()：印出交易詳細資料 


4. 主程式 (30%)
你可以直接利用投影片上的範例，並補上缺少的部分，或是自己寫一個也可以。
你的主程式要執行
(1)存款、提款
(2)轉帳交易，並記錄交易明細(交易的類型、帳戶、金額)
(3)明細查詢 (應列出使用者帳號的交易明細)

5. MakeFile (10%)
請參考 討論區 及 課業倉儲 的 MakeFile 教學連結，自行撰寫 MakeFile 檔案。

你的 MakeFile 要跟 source code 放在同一個目錄底下，
並且當使用者輸入 make 時，可以從你的 source code 編譯出執行檔。

[注意事項]
1.每一個class應該放在單獨的檔案中。
如果你的程式有 ball.cube兩個class的話
你的source code應該要有:
makefile, main.cpp, cube.h, cube.cpp, ball.h, ball.cpp

2.每次執行constructor destructor時，
印出xx constructed, xx destructed (xx為class名稱)

3.所有的member variable都應該設為private,
並讓主程式用public member function去存取或改變member variable。

4.若有作業規定外的功能請附上readme檔，並於檔案內說明。